/*********************************************************************************************
 *
 * * * * Xi4Snap * * *
 *
 * setBoardIpAddress1
 *
 *
 *
 *********************************************************************************************
 * Created by afy on 9/21/14.
 *
 * This is the Xi Client for Snap!
 *
 * Version v.001
 *
 *
 * @author: Alan Yorinks
 Copyright (c) 2014 Alan Yorinks All right reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public
 License as published by the Free Software Foundation; either
 version 3.0 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 *
 */

 function noServerAlert() {
 alert('Server not responding. Did you start XiServer for board ' +
 boardID + '? Start the server, reload this page and try again');
 }


 if (window.xi_beenHereDoneThat === undefined || window.xi_beenHereDoneThat === false) {
 if (window.xi_debugLevel >= 0) {
 console.log('Globals defined');
 }
 // 0 = no debug
 // 1 = low level debug
 // 2 = high - open the floodgates
 // Variable is set by user through a Scratch command block
 window.xi_debugLevel = 0;

 // Board IP addresses and ports are set by the user with a Scratch command block, and the information
 // is stored in the WebSocket Array

 // WebSocket array
 // Each board will have an associated WebSocket instance used for communication
 // with the Xi client. webSocketsArray is an array of objects. Each object has a format of:
 // {id: BoardID, , ip: IPAddress, port: port, ws: WebSocketReference}

 window.xi_webSocketsArray = [];

 // Sensor Data Array
 // This is an array of objects that store the latest sensor or switch value updates received from all Xi servers.
 // The object format is:
 // key: generated by genReporterKey()
 // value: latest updated value
 // A key is used to uniquely identify each data entry with a specific sensor on a specific server
 window.xi_sensorDataArray = [];

 window.xi_beenHereDoneThat = true;
 }
 else {
 if (window.xi_debugLevel >= 0) {
 console.log('Globals previously defined');
 }
 }

 /*****************************************************************************************************/
 /*********************************** Scratch Program Block Handlers, ******************************/
 /*****************************************************************************************************/

 // Associate a handler for each block described in the blocks section below

 /*******************************
 **** Command Block Handlers ****
 *******************************/

 // Accepts IP Address and Port information for each board that the user adds
 // The associated scratch block is a 'wait' command block.
 // We don't want Scratch to continue until the socket is open bidirectionally.
 // When socket.onopen is called the callback is returned so that scratch can proceed processing

 var timeoutID; // need to set a timeout when a socket is created because we are using a 'wait' block


 if (window.xi_debugLevel >= 1)
 console.log('setBoard: ' + boardID, ipAddress, port);

 // Check to make sure that this board was not entered previously
 for (var index = 0; index < window.xi_webSocketsArray.length; index++) {
 if (window.xi_webSocketsArray[index].id === boardID) {
 // allow user to reset the board to the same value - for stop and start
 if ((window.xi_webSocketsArray[index].ip === ipAddress) && (window.xi_webSocketsArray[index].port === port)) {
 //alert('An IP entry already exists for board ' + boardID + '!');
 return; // no need to go further
 }
 }
 }


 // This is a confirmed unique entry. Create a websocket for this board
 var socket = new WebSocket('ws://' + ipAddress + ':' + port);



 // add the entry including the websocket reference just created
 window.xi_webSocketsArray.push({'id': boardID, 'ip': ipAddress, 'port': port, 'ws': socket});

 if (window.xi_debugLevel >= 1) {
 console.log('Number of entries in webSocketsArray: ' + window.xi_webSocketsArray.length);
 }

 // start the timer for a server reply - we wait for up to 2 seconds for the reply
 timeoutID = window.setTimeout(noServerAlert, 2000);

// attach an onopen handler to this socket. This message is sent by a servers websocket
 socket.onopen = function (event) {
 window.clearTimeout(timeoutID);

 if (window.xi_debugLevel >= 1)
 console.log('onopen message received');
 // how many boards are attached

 socket.send('Xi4sOnline');

 };
