/*********************************************************************************************
 *
 * * * * Xi4Snap * * *
 *
 *     Sonar
 *
 *
 *
 *********************************************************************************************
 * Created by afy on 11/7/14.
 *
 * This is the Xi Client for Snap!
 *
 * Version v.001
 *
 *
 * @author: Alan Yorinks
 Copyright (c) 2014 Alan Yorinks All right reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public
 License as published by the Free Software Foundation; either
 version 3.0 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 *
 */

// Using the supplied key, this function will retrieve the latest data from the sensorDataArray.



function retrieveReporterData(boardID, pin, key) {
 // make sure that this is a unique key in the array
 for (var index = 0; index < window.xi_sensorDataArray.length; index++) {
 if (window.xi_sensorDataArray[index].key === key) {
 return window.xi_sensorDataArray[index].value
 }
 }
 // did not find an entry in the array
 alert('Did you set the pin mode for Board ' + boardID + ' Pin ' + pin +
 '? No entry for this block in database');
}




 //genReporterKey
 // Input: Board number
 // Pin number
 // Designator to differentiate between analog and digital - either 'a' or 'd'
 //
 // Returns the generated key
 function genReporterKey(boardID, pinNum, designator) {
 if (window.xi_debugLevel >= 1) {
 console.log('genReporterKey returns: ' + boardID + designator + pinNum);
 }
 return boardID + designator + pinNum;
}



 var rVal;

 if( window.xi_beenHereDoneThat === undefined)
 {
 alert("The first block of Xi script must be either a Set Debug Level or Set IPAddress block.");
 }

 if (window.xi_debugLevel >= 1)
 {
 console.log('infrared distance Input - board: ' + boardID + ' Pin: ' + pin);
 }


 var key = genReporterKey(boardID, pin, 'd');
 var distance = retrieveReporterData(boardID, pin, key);
 if (units === 'CM') {
        return (distance * 2.54).toFixed(2);
 }
 else {
    return distance;
 }

 if( window.xi_debugLevel >= 1) {
 console.log("infrared distance sensor Read returns: " + rVal) ;
 }
 return rVal;
